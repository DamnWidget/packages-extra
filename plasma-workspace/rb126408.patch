diff --git a/applets/notifications/lib/CMakeLists.txt b/applets/notifications/lib/CMakeLists.txt
index 6a76c3a..acf235d 100644
--- a/applets/notifications/lib/CMakeLists.txt
+++ b/applets/notifications/lib/CMakeLists.txt
@@ -7,6 +7,7 @@ add_library(plasma_applet_notifications MODULE ${notificationsapplet_SRCS})
 kcoreaddons_desktop_to_json(plasma_applet_notifications ../package/metadata.desktop)
 
 target_link_libraries(plasma_applet_notifications
+                      KF5::WindowSystem
                       KF5::Plasma
                       KF5::ConfigCore)
 
diff --git a/applets/notifications/lib/notificationsapplet.h b/applets/notifications/lib/notificationsapplet.h
index 5b262f1..772acdc 100644
--- a/applets/notifications/lib/notificationsapplet.h
+++ b/applets/notifications/lib/notificationsapplet.h
@@ -30,23 +30,36 @@ class NotificationsApplet : public Plasma::Applet
 {
     Q_OBJECT
     Q_PROPERTY(uint screenPosition READ screenPosition WRITE onScreenPositionChanged NOTIFY screenPositionChanged)
+    Q_PROPERTY(QRect availableScreenRect READ availableScreenRect NOTIFY availableScreenRectChanged)
 
 public:
     NotificationsApplet(QObject *parent, const QVariantList &data);
     ~NotificationsApplet();
 
-    Q_INVOKABLE uint screenPosition() const;
+    uint screenPosition() const;
+
+    // This is the screen position that is stored
+    // in the config file, used to initialize the
+    // applet settings dialog
+    Q_INVOKABLE uint configScreenPosition() const;
+
+    QRect availableScreenRect() const;
 
 public Q_SLOTS:
     void init() Q_DECL_OVERRIDE;
     void onScreenPositionChanged(uint position);
-    void onAppletLocationChanged(Plasma::Types::Location location);
+    void onAppletLocationChanged();
 
 Q_SIGNALS:
     void screenPositionChanged(uint position);
+    void availableScreenRectChanged(const QRect &availableScreenRect);
 
 private:
+    void setScreenPositionFromAppletLocation();
+    void onScreenChanges();
+
     NotificationsHelper::PositionOnScreen m_popupPosition;
+    QRect m_availableScreenRect;
 };
 
 
diff --git a/applets/notifications/lib/notificationsapplet.cpp b/applets/notifications/lib/notificationsapplet.cpp
index 891cdb0..881bc50 100644
--- a/applets/notifications/lib/notificationsapplet.cpp
+++ b/applets/notifications/lib/notificationsapplet.cpp
@@ -21,12 +21,18 @@
 
 #include "notificationsapplet.h"
 
+#include <KConfigGroup>
+#include <KWindowSystem>
+
 #include <QDebug>
+#include <QScreen>
 
-#include <KConfigGroup>
+#include <Plasma/Containment>
+#include <Plasma/Corona>
 
 NotificationsApplet::NotificationsApplet(QObject *parent, const QVariantList &data)
-    : Plasma::Applet(parent, data)
+    : Plasma::Applet(parent, data),
+      m_availableScreenRect(0,0,0,0)
 {
 }
 
@@ -36,36 +42,42 @@ NotificationsApplet::~NotificationsApplet()
 
 void NotificationsApplet::init()
 {
-    KConfigGroup globalGroup = globalConfig();
-    m_popupPosition = (NotificationsHelper::PositionOnScreen)globalGroup.readEntry("popupPosition", 0); //0 is default
+    m_popupPosition = (NotificationsHelper::PositionOnScreen)configScreenPosition();
 
     connect(this, &Plasma::Applet::locationChanged,
             this, &NotificationsApplet::onAppletLocationChanged);
 
+    connect(containment(), &Plasma::Containment::screenChanged,
+            this, &NotificationsApplet::onScreenChanges);
+
+    // This is to handle when eg. panel gets moved on screen
+    // to a different screen edge
+    connect(KWindowSystem::self(), &KWindowSystem::workAreaChanged,
+            this, &NotificationsApplet::onScreenChanges);
+
     Plasma::Applet::init();
 
-    onAppletLocationChanged(location());
+    onScreenChanges();
+    onAppletLocationChanged();
 }
 
-void NotificationsApplet::onAppletLocationChanged(Plasma::Types::Location location)
+void NotificationsApplet::onScreenChanges()
 {
-    if (globalConfig().readEntry("popupPosition", 0) == 0) {
-        // If the screenPosition is the default, follow the panel
-        if (location == Plasma::Types::TopEdge) {
-            if (QGuiApplication::isRightToLeft()) {
-                m_popupPosition = NotificationsHelper::TopLeft;
-            } else {
-                m_popupPosition = NotificationsHelper::TopRight;
-            }
-        } else {
-            if (QGuiApplication::isRightToLeft()) {
-                m_popupPosition = NotificationsHelper::BottomLeft;
-            } else {
-                m_popupPosition = NotificationsHelper::BottomRight;
-            }
-        }
+    m_availableScreenRect = containment()->corona()->availableScreenRect(containment()->screen());
+    Q_EMIT availableScreenRectChanged(m_availableScreenRect);
+}
 
-        Q_EMIT screenPositionChanged(m_popupPosition);
+QRect NotificationsApplet::availableScreenRect() const
+{
+    return m_availableScreenRect;
+}
+
+void NotificationsApplet::onAppletLocationChanged()
+{
+    if (configScreenPosition() == 0) {
+        // If the screenPosition is set to default,
+        // just follow the panel
+        setScreenPositionFromAppletLocation();
     }
 }
 
@@ -78,9 +90,42 @@ void NotificationsApplet::onScreenPositionChanged(uint position)
 {
     KConfigGroup globalGroup = globalConfig();
     globalGroup.writeEntry("popupPosition", position);
-    m_popupPosition = (NotificationsHelper::PositionOnScreen)position;
+    globalGroup.sync();
+
+    // If the position is set to default, let the setScreenPositionFromAppletLocation()
+    // figure out the effective position, otherwise just set it to m_popupPosition
+    // and emit the change
+    if (position == NotificationsHelper::Default) {
+        setScreenPositionFromAppletLocation();
+    } else {
+        m_popupPosition = (NotificationsHelper::PositionOnScreen)position;
+        Q_EMIT screenPositionChanged(m_popupPosition);
+    }
+}
+
+uint NotificationsApplet::configScreenPosition() const
+{
+    KConfigGroup globalGroup = globalConfig();
+    return globalGroup.readEntry("popupPosition", 0); //0 is default
+}
+
+void NotificationsApplet::setScreenPositionFromAppletLocation()
+{
+    if (location() == Plasma::Types::TopEdge) {
+        if (QGuiApplication::isRightToLeft()) {
+            m_popupPosition = NotificationsHelper::TopLeft;
+        } else {
+            m_popupPosition = NotificationsHelper::TopRight;
+        }
+    } else {
+        if (QGuiApplication::isRightToLeft()) {
+            m_popupPosition = NotificationsHelper::BottomLeft;
+        } else {
+            m_popupPosition = NotificationsHelper::BottomRight;
+        }
+    }
 
-    Q_EMIT screenPositionChanged(position);
+    Q_EMIT screenPositionChanged(m_popupPosition);
 }
 
 K_EXPORT_PLASMA_APPLET_WITH_JSON(notifications, NotificationsApplet, "metadata.json")
diff --git a/applets/notifications/package/contents/ui/Notifications.qml b/applets/notifications/package/contents/ui/Notifications.qml
index f479a65..a354abb 100644
--- a/applets/notifications/package/contents/ui/Notifications.qml
+++ b/applets/notifications/package/contents/ui/Notifications.qml
@@ -179,9 +179,15 @@ Column {
 
     }
 
+    Connections {
+        target: plasmoid.nativeInterface
+        onAvailableScreenRectChanged: {
+            notificationPositioner.setPlasmoidScreenGeometry(availableScreenRect);
+        }
+    }
+
     NotificationsHelper {
         id: notificationPositioner
-        plasmoidScreen: plasmoid.screenGeometry
         popupLocation: plasmoid.nativeInterface.screenPosition
     }
 
diff --git a/applets/notifications/package/contents/ui/configNotifications.qml b/applets/notifications/package/contents/ui/configNotifications.qml
index 95a8e59..b2da832 100644
--- a/applets/notifications/package/contents/ui/configNotifications.qml
+++ b/applets/notifications/package/contents/ui/configNotifications.qml
@@ -49,7 +49,7 @@ Item {
         QtControls.CheckBox {
             id: useCustomPopupPositionCheckBox
             text: i18n("Use custom position for the notification popup")
-            checked: plasmoid.nativeInterface.screenPosition != NotificationsHelper.Default
+            checked: plasmoid.nativeInterface.configScreenPosition() != NotificationsHelper.Default
         }
 
         ScreenPositionSelector {
diff --git a/applets/notifications/plugin/CMakeLists.txt b/applets/notifications/plugin/CMakeLists.txt
index 2f2239f..6ffaef2 100644
--- a/applets/notifications/plugin/CMakeLists.txt
+++ b/applets/notifications/plugin/CMakeLists.txt
@@ -7,9 +7,8 @@ add_library(notificationshelperplugin SHARED ${notificationshelper_SRCS})
 target_link_libraries(notificationshelperplugin Qt5::Core
                                                 Qt5::Gui
                                                 Qt5::Qml
-                                                Qt5::Quick
-                                                KF5::WindowSystem)
+                                                Qt5::Quick)
 
 install(TARGETS notificationshelperplugin DESTINATION ${KDE_INSTALL_QMLDIR}/org/kde/plasma/private/notifications)
 
-install(FILES qmldir DESTINATION ${KDE_INSTALL_QMLDIR}/org/kde/plasma/private/notifications)
\ No newline at end of file
+install(FILES qmldir DESTINATION ${KDE_INSTALL_QMLDIR}/org/kde/plasma/private/notifications)
diff --git a/applets/notifications/plugin/notificationshelper.h b/applets/notifications/plugin/notificationshelper.h
index 860a2da..d5c15cc 100644
--- a/applets/notifications/plugin/notificationshelper.h
+++ b/applets/notifications/plugin/notificationshelper.h
@@ -31,7 +31,6 @@ class QReadWriteLock;
 class NotificationsHelper : public QObject
 {
     Q_OBJECT
-    Q_PROPERTY(QRect plasmoidScreen MEMBER m_plasmoidScreen)
     Q_PROPERTY(PositionOnScreen popupLocation MEMBER m_popupLocation WRITE setPopupLocation NOTIFY popupLocationChanged)
     Q_ENUMS(PositionOnScreen)
 
@@ -52,9 +51,10 @@ public:
     NotificationsHelper(QObject *parent = 0);
     ~NotificationsHelper();
     Q_INVOKABLE void addNotificationPopup(QObject *win);
-    Q_INVOKABLE QRect workAreaForScreen(const QRect &screen);
     Q_INVOKABLE void closePopup(const QString &sourceName);
 
+    Q_INVOKABLE void setPlasmoidScreenGeometry(const QRect &geometry);
+
     void setPopupLocation(PositionOnScreen popupLocation);
 
     /**
@@ -67,6 +67,7 @@ public:
 
 Q_SIGNALS:
     void popupLocationChanged();
+//     void plasmoidScreenChanged();
 
 private Q_SLOTS:
     void onPopupShown();
@@ -78,6 +79,7 @@ private Q_SLOTS:
 private:
     void repositionPopups();
     int popupYPosition();
+    void setDefaultPopupPosition(QQuickWindow *popup);
 
     QList<QQuickWindow*> m_popupsOnScreen;
     QList<QQuickWindow*> m_availablePopups;
diff --git a/applets/notifications/plugin/notificationshelper.cpp b/applets/notifications/plugin/notificationshelper.cpp
index 15b4479..dbc30d6 100644
--- a/applets/notifications/plugin/notificationshelper.cpp
+++ b/applets/notifications/plugin/notificationshelper.cpp
@@ -17,16 +17,13 @@
 */
 
 #include "notificationshelper.h"
-#include <kwindowsystem.h>
 
-#include <QScreen>
 #include <QGuiApplication>
 #include <qfontmetrics.h>
 #include <QTimer>
 #include <QQuickWindow>
 #include <QQuickItem>
 #include <QQmlEngine>
-#include <QTimer>
 #include <QReadWriteLock>
 #include <QDebug>
 
@@ -51,11 +48,6 @@ NotificationsHelper::~NotificationsHelper()
     delete m_mutex;
 }
 
-int NotificationsHelper::popupYPosition()
-{
-    return workAreaForScreen(m_plasmoidScreen).height() - m_offset;
-}
-
 void NotificationsHelper::setPopupLocation(PositionOnScreen popupLocation)
 {
     if (m_popupLocation != popupLocation) {
@@ -67,32 +59,19 @@ void NotificationsHelper::setPopupLocation(PositionOnScreen popupLocation)
         // The visible popups are corrected in repositionPopups
         // but those that are not on screen need to be corrected
         // as well, otherwise they will fly from the old popup location
-        m_mutex->lockForWrite();
         Q_FOREACH (QQuickWindow *popup, m_availablePopups) {
-            if (m_popupLocation == NotificationsHelper::TopLeft
-                    || m_popupLocation == NotificationsHelper::TopCenter
-                    || m_popupLocation == NotificationsHelper::TopRight) {
-
-                popup->setY(m_offset);
-            } else {
-                popup->setY(popupYPosition());
-            }
+            setDefaultPopupPosition(popup);
         }
-        m_mutex->unlock();
     }
 }
 
-QRect NotificationsHelper::workAreaForScreen(const QRect &screenGeometry)
+void NotificationsHelper::setPlasmoidScreenGeometry(const QRect &plasmoidScreenGeometry)
 {
-    QRect workArea = KWindowSystem::workArea();
-    Q_FOREACH (QScreen *screen, qApp->screens()) {
-        QRect geo = screen->geometry();
-        if (geo.contains(screenGeometry.center())) {
-            return geo.intersected(workArea);
-        }
+    m_plasmoidScreen = plasmoidScreenGeometry;
+    repositionPopups();
+    Q_FOREACH (QQuickWindow *popup, m_availablePopups) {
+        setDefaultPopupPosition(popup);
     }
-
-    return workArea;
 }
 
 void NotificationsHelper::addNotificationPopup(QObject *win)
@@ -110,22 +89,46 @@ void NotificationsHelper::addNotificationPopup(QObject *win)
     // with data, but we set it initially to small value so it's not too
     // big for eg. one line notifications
     popup->setHeight(1);
+    setDefaultPopupPosition(popup);
 
-    // This is to make sure the popups won't fly across the whole
-    // screen the first time they appear
+    connect(popup, &QWindow::heightChanged, this, &NotificationsHelper::repositionPopups, Qt::UniqueConnection);
+    connect(popup, &QWindow::widthChanged, this, &NotificationsHelper::repositionPopups, Qt::UniqueConnection);
+    connect(popup, &QWindow::visibleChanged, this, &NotificationsHelper::onPopupShown, Qt::UniqueConnection);
+}
+
+void NotificationsHelper::setDefaultPopupPosition(QQuickWindow *popup)
+{
+    m_mutex->lockForWrite();
     if (m_popupLocation == NotificationsHelper::TopLeft
-            || m_popupLocation == NotificationsHelper::TopCenter
-            || m_popupLocation == NotificationsHelper::TopRight) {
+        || m_popupLocation == NotificationsHelper::TopCenter
+        || m_popupLocation == NotificationsHelper::TopRight) {
 
-        popup->setY(m_offset);
+        popup->setY(m_plasmoidScreen.y() + m_offset);
     } else {
-        popup->setY(popupYPosition());
+        popup->setY(m_plasmoidScreen.y() + m_plasmoidScreen.height());
     }
-    popup->setX(workAreaForScreen(m_plasmoidScreen).width() - m_offset - popup->width());
 
-    connect(popup, &QWindow::heightChanged, this, &NotificationsHelper::repositionPopups, Qt::UniqueConnection);
-    connect(popup, &QWindow::widthChanged, this, &NotificationsHelper::repositionPopups, Qt::UniqueConnection);
-    connect(popup, &QWindow::visibleChanged, this, &NotificationsHelper::onPopupShown, Qt::UniqueConnection);
+    switch (m_popupLocation) {
+        case TopRight:
+        case BottomRight:
+            popup->setX(m_plasmoidScreen.right() - popup->contentItem()->width() - m_offset);
+            break;
+        case TopCenter:
+        case BottomCenter:
+            popup->setX(m_plasmoidScreen.x() + (m_plasmoidScreen.width() / 2) - (popup->contentItem()->width() / 2));
+            break;
+        case TopLeft:
+        case BottomLeft:
+            popup->setX(m_plasmoidScreen.left() + m_offset);
+            break;
+        case Left:
+        case Center:
+        case Right:
+            // Fall-through to make the compiler happy
+            break;
+    }
+
+    m_mutex->unlock();
 }
 
 void NotificationsHelper::onPopupShown()
@@ -229,14 +232,7 @@ void NotificationsHelper::processHide()
         // huge but setting short text won't make it smaller
         popup->setHeight(1);
         // Make sure it flies in from where it's supposed to
-        if (m_popupLocation == NotificationsHelper::TopLeft
-                || m_popupLocation == NotificationsHelper::TopCenter
-                || m_popupLocation == NotificationsHelper::TopRight) {
-
-            popup->setY(m_offset);
-        } else {
-            popup->setY(popupYPosition());
-        }
+        setDefaultPopupPosition(popup);
     }
 
     m_mutex->lockForRead();
@@ -349,41 +345,47 @@ void NotificationsHelper::onPopupClosed()
 
 void NotificationsHelper::repositionPopups()
 {
-    QRect workArea = workAreaForScreen(m_plasmoidScreen);
-
     int cumulativeHeight = m_offset;
 
     m_mutex->lockForWrite();
 
     for (int i = 0; i < m_popupsOnScreen.size(); ++i) {
-        if (m_popupLocation == NotificationsHelper::TopLeft || m_popupLocation == NotificationsHelper::TopCenter || m_popupLocation == NotificationsHelper::TopRight) {
+        if (m_popupLocation == NotificationsHelper::TopLeft
+            || m_popupLocation == NotificationsHelper::TopCenter
+            || m_popupLocation == NotificationsHelper::TopRight) {
+
             if (m_popupsOnScreen[i]->isVisible()) {
                 //if it's visible, go through setProperty which animates it
-                m_popupsOnScreen[i]->setProperty("y", workArea.top() + cumulativeHeight);
+                m_popupsOnScreen[i]->setProperty("y", m_plasmoidScreen.top() + cumulativeHeight);
             } else {
                 // ...otherwise just set it directly
-                m_popupsOnScreen[i]->setY(workArea.top() + cumulativeHeight);
+                m_popupsOnScreen[i]->setY(m_plasmoidScreen.top() + cumulativeHeight);
             }
         } else {
             if (m_popupsOnScreen[i]->isVisible()) {
-                m_popupsOnScreen[i]->setProperty("y", workArea.bottom() - cumulativeHeight - m_popupsOnScreen[i]->contentItem()->height());
+                m_popupsOnScreen[i]->setProperty("y", m_plasmoidScreen.bottom() - cumulativeHeight - m_popupsOnScreen[i]->contentItem()->height());
             } else {
-                m_popupsOnScreen[i]->setY(workArea.bottom() - cumulativeHeight - m_popupsOnScreen[i]->contentItem()->height());
+                m_popupsOnScreen[i]->setY(m_plasmoidScreen.bottom() - cumulativeHeight - m_popupsOnScreen[i]->contentItem()->height());
             }
         }
 
         switch (m_popupLocation) {
             case TopRight:
             case BottomRight:
-                m_popupsOnScreen[i]->setX(workArea.right() - m_popupsOnScreen[i]->contentItem()->width() - m_offset);
+                m_popupsOnScreen[i]->setX(m_plasmoidScreen.right() - m_popupsOnScreen[i]->contentItem()->width() - m_offset);
                 break;
             case TopCenter:
             case BottomCenter:
-                m_popupsOnScreen[i]->setX((workArea.width() / 2) - (m_popupsOnScreen[i]->contentItem()->width() / 2));
+                m_popupsOnScreen[i]->setX(m_plasmoidScreen.x() + (m_plasmoidScreen.width() / 2) - (m_popupsOnScreen[i]->contentItem()->width() / 2));
                 break;
             case TopLeft:
             case BottomLeft:
-                m_popupsOnScreen[i]->setX(workArea.left() + m_offset);
+                m_popupsOnScreen[i]->setX(m_plasmoidScreen.left() + m_offset);
+                break;
+            case Left:
+            case Center:
+            case Right:
+                // Fall-through to make the compiler happy
                 break;
         }
 
